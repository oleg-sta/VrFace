plugins {
    id 'com.android.library'
}

repositories {
    maven {
        url 'https://maven.google.com'
    }
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"
    ndkVersion '22.0.7026061'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
//                abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
                abiFilters 'arm64-v8a'
                arguments "-DANDROID_STL=c++_shared" // very important to add this flag, it adds library
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        prefab true
    }

    sourceSets {
        main {
            aidl {
                srcDir 'src'
            }
            jni {
                srcDirs = []
            }
            jniLibs {
                srcDirs 'libs'
            }
        }
    }


    // temporal
    task javadoc(type: Javadoc) {
        excludes = ['**/*.aidl'] // < ---- Exclude all kotlin files from javadoc file.
        // ...
    }
    // temporal for check
    lintOptions {
        abortOnError false
    }

//    Properties properties = new Properties()
//    properties.load(project.rootProject.file('local.properties').newDataInputStream())
//    def sdkDir = properties.getProperty('sdk.dir')
//    def ndkDir = properties.getProperty('ndk.dir')
//    def OPEN_CV_SDK = properties.getProperty('opencv.dir')
//
//    task ndkBuild(type: Exec, description: 'Compile JNI source via NDK') {
//        commandLine ndkDir + "/ndk-build",
//                'NDK_PROJECT_PATH=build/intermediates/ndk',
//                'NDK_LIBS_OUT=libs',
//                'APP_BUILD_SCRIPT=src/main/jni/Android.mk',
//                'NDK_APPLICATION_MK=src/main/jni/Application.mk',
//                'OPEN-CV-SDK=' + OPEN_CV_SDK,
////                'ANDROID_STL=gnustl_shared',
//                'ANDROID_STL=gnustl_static'
//    }
    externalNativeBuild {
        cmake {
            path "src/main/jni/CMakeLists.txt"
        }
    }
//    ndk {
//        abiFilters 'armeabi-v7a','arm64-v8a','armeabi'
//    }


//    externalNativeBuild {
//        cmake {
//            path "src/main/jni/CMakeLists.txt"
//        }
//    }
    flavorDimensions 'cpuArch'
    productFlavors {
        arm8 {
            dimension 'cpuArch'
            ndk {
                abiFilters 'arm64-v8a', 'armeabi-v7a'
            }
        }
        x86_64 {
            dimension 'cpuArch'
            ndk {
                abiFilters 'x86_64', 'x86'
            }
        }
        universal {
            dimension 'cpuArch'
        }
    }

//    tasks.withType(JavaCompile) {
//        compileTask -> compileTask.dependsOn ndkBuild
//    }
//
//    defaultConfig {
//        ndk {
//            abiFilters "armeabi-v7a"
//        }
//    }

//    externalNativeBuild {
//        ndkBuild {
//            path 'src/main/jni/Android.mk'
//        }
//    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

ext {
    bintrayRepo = 'maven'
    bintrayName = 'vrface'   // Has to be same as your library module name

    publishedGroupId = 'com.stoleg'
    libraryName = 'VrFace'
    artifact = 'vrface'     // Has to be same as your library module name

    libraryDescription = 'Android Library to make any text into Toast with Awesome prepended to the text'

    // Your github repo link
    siteUrl = 'https://github.com/oleg-sta/commonLibMask'
    gitUrl = 'https://github.com/oleg-sta/commonLibMask.git'
    githubRepository= 'oleg-sta/commonLibMask'

    libraryVersion = '1.1'

    developerId = 'oleg-sta'
    developerName = 'Oleg Stadnichenko'
    developerEmail = 'oleg.stadnichenko@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

//apply from: 'https://raw.githubusercontent.com/nisrulz/JCenter/master/installv1.gradle'
//apply from: 'https://raw.githubusercontent.com/nisrulz/JCenter/master/bintrayv1.gradle'